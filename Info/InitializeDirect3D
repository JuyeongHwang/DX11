
 Direct3D를 사용하기 위해서는 초기화해야하는 COM 인터페이스 오브젝트가 몇개 있다.


1. SwapChain 
스왑체인은 백버퍼와 프론트 버퍼를 서로 바꾸는데 이용. 더블 버퍼링이라고 불리운다.
현재 스크린에는 프론트 버퍼가 사용되고 있고, 백버퍼로 다음에 그려질 화면을 준비하고 있는다.
백버퍼에 화면을 그릴 모든 준비가 되면, 이 둘을 바꿔주는 과정을 거치는데 이를 스왑체인이 해준다.

2. Device
그 다음 정의해야 할 COM객체는 하드웨어 디바이스인 GPU를 표현할 객체이다.
directX11부터 새로운 인터페이스가 생겼는데, 바로 ID3D11Device와 ID3D11DeviceContext이다.
이는 새로운 멀티스레딩 시스템을 더 잘 사용되도록 도와준다. 
디바이스 컨텍스트같은 경우 모든 렌더링 메소드를 부를 때 사용될 예정이고, 반면에 device는
렌더링과 관련없는 나머지 메소드들을 부를 때 이용될 것이다.

3. render target view
원래 스크린에 직접적으로 그리는 것이 아니라, 2d 텍스쳐인 렌더 타겟 뷰에 대신 그린다. 그리고
이 텍스쳐는 output merger stage(파이프라인 중 한 곳)에 렌더 타겟으로 전송되고, 그 뒤 스크린에 그려지는 것이다.

-초기화하는 큰 흐름은 
"desc 생성-> 구조체 작성 -> 작성한 구조체와 device를 이용하여 버퍼 생성 ->사용 -> 사용이 끝났으면 해제"
인듯 하다.
-이는 가장 기본적인 COM 인터페이스만 적어두었다는 점을 잊지 말자!



-------------------------------------------------------------------------
1. HRESULT : COM 인터페이스의 리턴 타입. 오류 체크를 위함.

2. 	ID3D11Texture2D* BackBufferPtr = nullptr;
	hr = swapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&BackBufferPtr);

3. 스텐실..뭐더라?

필요한 헤더 파일들

~~~
#include <SDKDDKVer.h>

#define WIN32_LEAN_AND_MEAN             // 거의 사용되지 않는 내용은 Windows 헤더에서 제외합니다.
// Windows 헤더 파일:
#include <windows.h>

// C 런타임 헤더 파일입니다.
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <tchar.h>

#include <fstream>
using namespace std;

/////////////
// LINKING //
/////////////
#pragma comment(lib, "d3d11.lib")
#pragma comment(lib, "dxgi.lib")
#pragma comment(lib, "d3dcompiler.lib")
//////////////
// INCLUDES //
//////////////
#include <d3d11.h>
#include <d3dcompiler.h>
#include <directxmath.h>
using namespace DirectX;

//*** 전역변수 ***//
const int Width = 800;
const int Height = 600;

class D3DClass;
class SystemClass {
public:
	SystemClass(){}
	~SystemClass(){}
public:
	LPCTSTR WndClassName = L"firstWindow";
	HWND hwnd = NULL;
	//window 만들기 성공 : true, 아니면 false를 반환할 것임.
	bool InitializeWindow(HINSTANCE hInstance, int ShowWnd, int width, int height, bool windowed);

	//프로그램이 돌아갈 곳.
	int messageloop(D3DClass* d3d);
};


class D3DClass {
public:
	D3DClass() {}
	~D3DClass() {}

	bool InitializeDirect3d11App(HINSTANCE hInstance, HWND hwnd);
	void ReleaseObjects();
	bool InitScene();
	void UpdateScene();
	void DrawScene();

	float red = 0.0f;
	float green = 0.0f;
	float blue = 0.0f;
	int colormodr = 1;
	int colormodg = 1;
	int colormodb = 1;

private:
	IDXGISwapChain* swapChain = nullptr;
	ID3D11Device* device = nullptr;
	ID3D11DeviceContext* deviceContext = nullptr;
	ID3D11RenderTargetView* renderTargetView = nullptr;

	ID3D11Texture2D* depthStencilBuffer = nullptr;
	ID3D11DepthStencilState* depthStencilState = nullptr;
	ID3D11DepthStencilView* depthStencilView = nullptr;
};

// window callback procedure도 설정해줘야함.
// 윈도우의 메세지를 처리하는 곳입니다
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lParam);



///****< Main Windows Fuction >****///
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd) {

	SystemClass* system = new SystemClass;
	D3DClass* d3d = new D3DClass;
	if (!system->InitializeWindow(hInstance, nShowCmd, Width, Height, true)) {

		MessageBox(0, L"Window Initialization - Failed", L"Error", MB_OK);
		return 0;
	}

	if (!d3d->InitializeDirect3d11App(hInstance, system->hwnd)) {
		MessageBox(0, L"Direct3d Initialization - Failed", L"Error", MB_OK);
		return 0;
	}

	system->messageloop(d3d);

	d3d->ReleaseObjects();

	return 0;
}





bool D3DClass::InitializeDirect3d11App(HINSTANCE hInstance, HWND hwnd) {

	HRESULT hr;

	//버퍼 DESCRIBE for backBuffer
	DXGI_MODE_DESC bufferDesc;
	ZeroMemory(&bufferDesc, sizeof(DXGI_MODE_DESC));

	bufferDesc.Width = Width;
	bufferDesc.Height = Height; //resolution
	bufferDesc.RefreshRate.Numerator = 60;
	bufferDesc.RefreshRate.Denominator = 1; //Hz. 1/60
	bufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
	//스캔 라인 순서 및 크기를 지정하지 않음.
	bufferDesc.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;
	bufferDesc.Scaling = DXGI_MODE_SCALING_UNSPECIFIED;

	//스왑체인 DESCRIBE
	DXGI_SWAP_CHAIN_DESC swapChainDesc;
	ZeroMemory(&swapChainDesc, sizeof(DXGI_SWAP_CHAIN_DESC));

	swapChainDesc.BufferDesc = bufferDesc; //위에서 정의
	swapChainDesc.BufferCount = 1; //백버퍼 하나만 사용.
	swapChainDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT; //백버퍼의 사용 용도 지정
	swapChainDesc.OutputWindow = hwnd; //사용될 윈도우 핸들

	//멀티샘플링
	swapChainDesc.SampleDesc.Count = 1;
	swapChainDesc.SampleDesc.Quality = 0;
	swapChainDesc.Windowed = TRUE;
	swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_DISCARD; //출력된 다음 백버퍼를 비우도록 지정.
	swapChainDesc.Flags = 0; //추가 옵션 플래그 사용안함.
	
	hr = D3D11CreateDeviceAndSwapChain(NULL, D3D_DRIVER_TYPE_HARDWARE, NULL,
		NULL,NULL, NULL, D3D11_SDK_VERSION, &swapChainDesc , &swapChain, &device, NULL, &deviceContext);
	if (FAILED(hr)) {
		MessageBox(NULL, L"Create SwapChain failed", L"D3D11CreateDeviceAndSwapChain", MB_OK);
		return false;
	}
	
	//백버퍼 생성
	ID3D11Texture2D* BackBufferPtr = nullptr;
	hr = swapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (void**)&BackBufferPtr);
	if (FAILED(hr)) {
		MessageBox(NULL, L"Create BackBuffer failed", L"swapChain->GetBuffer", MB_OK);
		return false;
	}

	//백버퍼포인터로 렌더타겟 뷰 생성
	hr = device->CreateRenderTargetView(BackBufferPtr, NULL, &renderTargetView);
	if (FAILED(hr)) {
		MessageBox(NULL, L"Create rendertargetview failed", L"device->CreateRenderTargetView", MB_OK);
		return false;
	}

	//필요 없어진 백버퍼 포인터 해제
	BackBufferPtr->Release();
	BackBufferPtr = 0;


	

	deviceContext->OMSetRenderTargets(1, &renderTargetView, NULL);

	///***래스터라이저 공간***///
	///***래스터라이저 공간***///

	return true;
}
void D3DClass::ReleaseObjects() {
	swapChain->Release();
	device->Release();
	deviceContext->Release();
}
bool D3DClass::InitScene() {
	HRESULT hr;

	return true;
}
void D3DClass::UpdateScene() {
	//Update the colors of our scene
	red += colormodr * 0.00005f;
	green += colormodg * 0.00002f;
	blue += colormodb * 0.00001f;

	if (red >= 1.0f || red <= 0.0f)
		colormodr *= -1;
	if (green >= 1.0f || green <= 0.0f)
		colormodg *= -1;
	if (blue >= 1.0f || blue <= 0.0f)
		colormodb *= -1;
}
void D3DClass::DrawScene() {
	float bgColor[] = { red,green,blue,1.0f };

	deviceContext->ClearRenderTargetView(renderTargetView, bgColor);
	
	//백버퍼를 스크린에 나타냄.
	swapChain->Present(0, 0);

}


//// **********  시스템 클래스 ********** ////
bool SystemClass::InitializeWindow(HINSTANCE hInstance, int ShowWnd, int width, int height, bool windowed) {

	//1. WNDCLASSEX 만들기
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc = WndProc;
	wc.cbClsExtra = NULL;
	wc.cbWndExtra = NULL;
	wc.hInstance = hInstance;
	wc.hIcon = LoadIcon(NULL, IDI_WINLOGO);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 2);
	wc.lpszMenuName = NULL;
	wc.lpszClassName = WndClassName;
	wc.hIconSm = LoadIcon(NULL, IDI_WINLOGO);

	//2. 등록
	if (!RegisterClassEx(&wc)) {
		MessageBox(NULL, L"Error registering class", L"Error", MB_OK | MB_ICONERROR);
		return false;
	}

	//3. 만들기. This is the part where we create our window!!

	hwnd = CreateWindowEx(NULL,WndClassName,L"Geometry Dash",WS_OVERLAPPEDWINDOW,CW_USEDEFAULT, CW_USEDEFAULT,
		width,height,NULL,NULL,hInstance,NULL);


	if (!hwnd) {
		MessageBox(NULL, L"Error creating window", L"Error", MB_OK | MB_ICONERROR);
		return false;
	}

	//4.창을 보여주고 업데이트
	ShowWindow(hwnd, ShowWnd);
	UpdateWindow(hwnd);

	return true;
}

int SystemClass::messageloop(D3DClass* d3d) {

	//1. MSG 구조체 객체 만들기. This will hold the message's information.
	MSG msg;

	ZeroMemory(&msg, sizeof(MSG));


	while (true)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT) {
				break;
			}

			TranslateMessage(&msg); //키보드의 virtual key를 characters로 변환하는 것같은 역할
			DispatchMessage(&msg); //보낸다 메세지를. 우리의 window precedure에게.(WndProc)
		}
		else {
			d3d->UpdateScene();
			d3d->DrawScene();
		}
	}

	return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
	switch (msg) {

	case WM_KEYDOWN:
		if (wParam == VK_ESCAPE) {
			if (MessageBox(0, L"Are you sure you want to exit?", L"Really?", MB_YESNO | MB_ICONQUESTION) == IDYES)
				DestroyWindow(hwnd);
		}
		return 0;

	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}

	return DefWindowProc(hwnd, msg, wParam, lParam);
}


~~~
